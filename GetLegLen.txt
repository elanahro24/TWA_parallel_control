function [macro_leg_len, micro_leg_len, x_cur]  = fcn(x_des,ee_rot,macro_leg_len_prev,micro_leg_len_prev,x_prev)
% This function solves for the vertex positions of the base and moving
% platform for a given desired end effector position.
% With vertex positions known, leg lengths can be solved for.

% initialization
conv_rad = 0.5; %[mm]
x_cur = x_des;
macro_leg_len = macro_leg_len_prev;
micro_leg_len = micro_leg_len_prev;
x_delta = abs(x_des - x_prev);

% initial twa wire length
init_twa_len = [225.8;226.3;224.5]; %[mm]

% moving platform radius
p_rad = 45.00; %[mm]

% base radius
b_rad = 162.32;% 158.04; %[mm]

% rotation of moving-platform frame to world frame about z-xis
rot_m2w = [cos(ee_rot) -sin(ee_rot) 0; sin(ee_rot) cos(ee_rot) 0; 0 0 1];

% moving platform vertex locations
vertex_radial_loc = [330 90 210]*pi/180;
p_in_m = p_rad*[cos(vertex_radial_loc);sin(vertex_radial_loc);zeros(1,3)];

% x_des = zeros(3,1);
p_in_w = x_des*ones(1,3) + rot_m2w*p_in_m;

% base vertex positions
b_in_w = b_rad*[cos(vertex_radial_loc);sin(vertex_radial_loc);zeros(1,3)];

% position of flexure centers
% radius of position of flexure center
f_rad = 80; %[mm]
flex_radial_loc = [-40 80 200]*pi/180;
f_in_w = f_rad*[cos(flex_radial_loc);sin(flex_radial_loc);zeros(1,3)];

% position of twa pivot point, taken from CAD
% radius of position of twa pivot
m_rad = 11.915;
motor_radial_locs = [257.18 17.18 137.18]*pi/180;
m_in_w = m_rad*[cos(motor_radial_locs);sin(motor_radial_locs);zeros(1,3)];

if x_delta(1,1) > conv_rad || x_delta(2,1) > conv_rad
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %        Macro Actuator        %
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    
    vertex_dist = p_in_w - b_in_w;
    
    macro_leg_len = zeros(3,1);
    macro_leg_len(1,1) = norm(vertex_dist(:,1));
    macro_leg_len(2,1) = norm(vertex_dist(:,2));
    macro_leg_len(3,1) = norm(vertex_dist(:,3));
    
elseif x_delta(1,1) < conv_rad || x_delta(2,1) < conv_rad
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %       Micro Actuator         %
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    
    % initial flexure bend
    beta_cmd = 5*pi/180;

    % loop through each vertex
    for i = 1:3
        post_flex_angle = zeros(1,2);
        beta = NaN(1,2);
        
        % vector from flexure center to moving platform vertex
        rho_vec = p_in_w(:,i) - f_in_w(:,i);
        
        % distance between flexure and moving platform verteces
        rho = norm(rho_vec);
        
        % vector from flexure center to base vertex pre flexure rotation
        eta_vec = b_in_w(:,i) - f_in_w(:,i);
        
        % flexure angle at the start (e.g. 5 deg preload) in world frame
        pre_flex_angle = atan2(eta_vec(2,1),eta_vec(1,1));
        
        % magnitude of flexure swing-arm radius from flexure to base vertex
        eta = norm(eta_vec);
        
        % angle from world horizontal to the vector from the flexure
        % center to the platform vertex
        flexure_frame_rot_angle = atan2(rho_vec(2,1),rho_vec(1,1));
        
        % rotation matrix from flexure frame to world
        n = [0;0;1] ./ norm([0;0;1]);
        rot_f2w = expm(flexure_frame_rot_angle*[0 -n(3) n(2);n(3) 0 -n(1);n(2) n(1) 0]);
        
        % condition for acos solvability
        check = (macro_leg_len(i,1)^2-rho^2-eta^2)/(-2*rho*eta);
        
        if check >= -1 && check <= 1
            % calculate angle between fp and fb vectors, lambda, with
            % law of cosines
            lambda = acos(check);
            
            % calculate flexed base vertex position for both elbow up
            % and down configurations in the flexure frame
            b_prime_in_f_dwn = eta*[cos(-lambda);sin(-lambda);0];
            b_prime_in_f_up = eta*[cos(lambda);sin(lambda);0];
            
            % vector from flexure center point to new base vertex location 
            % rotated to world frame
            eta_prime_vec_dwn = rot_f2w*b_prime_in_f_dwn;
            eta_prime_vec_up = rot_f2w*b_prime_in_f_up;
                        
            post_flex_angle(1,1) = atan2(eta_prime_vec_dwn(2,1),eta_prime_vec_dwn(1,1));
            post_flex_angle(1,2) = atan2(eta_prime_vec_up(2,1),eta_prime_vec_up(1,1));
            
            % determine if flex angle is within mechanical range
            for j = 1:2
                if pre_flex_angle < 0 && post_flex_angle(1,i) < 0
                    beta(1,j) = (-1*pre_flex_angle)-(-1*post_flex_angle(1,j));
                else
                    beta(1,j) = pre_flex_angle - post_flex_angle(1,j);
                end
                
                if beta(1,j) >= -pi/18 && beta(1,j) <= pi/18
                    beta_cmd = beta(1,j);
                end
            end 
        end
        
        % initial angle prior to flexure bend
        a = norm(f_in_w(:,i) - m_in_w(:,i));
        b = norm(f_in_w(:,i) - b_in_w(:,i));
        c = init_twa_len(i,1);
        alpha =  acos((c^2 - a^2 - b^2)/(-2*a*b));
        
        % calculate required twa length to facilitate flexure bend
        micro_leg_len(i,1) = sqrt(a^2 - b^2 - 2*a*b*cos(alpha - beta_cmd));
    end
end